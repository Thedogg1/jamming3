{"ast":null,"code":"var _jsxFileName = \"C:\\\\inetpub\\\\wwwroot\\\\Projects\\\\Jamming\\\\jamming\\\\src\\\\components\\\\app\\\\App.js\";\nimport './App.css';\nimport React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    let tracks = this.state.playlistTracks; /*refers to the current state of the above array*/\n    if (tracks.find(savedTrack => savedTrack.id === track)) {\n      return;\n    }\n    /* if it's anew track, add it to the array*/\n    tracks.push(track);\n    /*update teh state of playlistTracks to the new tracks array defined above*/\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.Uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New playlist',\n        playListTracks: []\n      });\n    });\n  }\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-PlayList\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 4\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","SearchBar","SearchResults","PlayList","Spotify","jsxDEV","_jsxDEV","App","Component","constructor","props","state","searchResults","playlistName","playlistTracks","updatePlaylistName","bind","addTrack","removeTrack","savePlaylist","search","track","tracks","find","savedTrack","id","push","setState","filter","currentTrack","name","trackUris","map","Uri","then","playListTracks","term","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onAdd","onRemove","onNameChange","onSave"],"sources":["C:/inetpub/wwwroot/Projects/Jamming/jamming/src/components/app/App.js"],"sourcesContent":["\nimport './App.css';\nimport React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []       \n         \n    }\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.addTrack=this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n   \n  }\naddTrack(track){\n  let tracks=this.state.playlistTracks; /*refers to the current state of the above array*/\n  if (tracks.find(savedTrack =>savedTrack.id===track)){\nreturn;\n  }  \n  /* if it's anew track, add it to the array*/\n  tracks.push(track);\n  /*update teh state of playlistTracks to the new tracks array defined above*/\nthis.setState({playlistTracks: tracks});\n\n}\n\nremoveTrack(track){\n  let tracks=this.state.playlistTracks;\n  tracks=tracks.filter(currentTrack=>currentTrack.id!==track.id);\n  this.setState ({playlistTracks: tracks});\n\n\n}\n\nupdatePlaylistName(name){\nthis.setState ({playlistName: name});\n}\n  savePlaylist(){\n    const trackUris=this.state.playlistTracks.map(track=>track.Uri)\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(()=>{\n      this.setState({\n      playlistName: 'New playlist',\n      playListTracks: []\n    })\n    })\n  }\n  \nsearch(term){\nSpotify.search(term).then(searchResults =>{\n  this.setState({searchResults: searchResults})\n})\n}\n  render(){\n  \n  return (\n    <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search}/>\n    <div className=\"App-PlayList\">\n    <SearchResults searchResults={this.state.searchResults}\n    onAdd= {this.addTrack}/>\n   <PlayList playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}\n   onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n    \n   );\n  }\n}\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}