{"ast":null,"code":"const clientId = \"9c4652c46bd6487aa4a63b0cb56c3b12\";\nconst redirectUri = \"http://localhost:3000\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    //check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    //the above expression captures all teh characters in tthe access token\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch)[1];\n      /*This clears the parameters, allowing us to grab\r\n      a new access token when it expires*/\n      window.setTimeout(() => accessToken = \" \", expiresIn * 1000);\n      window.history.pushState('Access token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=\n            CLIENT_ID${clientId}&response_type=token&scope=\n            playlist-modify-public&redirect_uri=\n            REDIRECT_URI=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.accessUrl\n      }));\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","artist","artists","name","album","uri"],"sources":["C:/inetpub/wwwroot/Projects/Jamming/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId=\"9c4652c46bd6487aa4a63b0cb56c3b12\";\r\nconst redirectUri=\"http://localhost:3000\";\r\n\r\nlet accessToken;\r\n\r\n\r\nconst Spotify={\r\n    getAccessToken(){\r\n        if (accessToken){\r\n            return accessToken;\r\n        }\r\n        //check for an access token match\r\n        const accessTokenMatch= \r\n        window.location.href.match(/access_token=([^&]*)/);\r\n        //the above expression captures all teh characters in tthe access token\r\n        const expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch){\r\n            accessToken=accessTokenMatch[1];\r\n            const expiresIn=Number(expiresInMatch)[1];\r\n            /*This clears the parameters, allowing us to grab\r\n            a new access token when it expires*/\r\n            window.setTimeout(()=>accessToken=\" \", expiresIn * 1000);\r\n            window.history.pushState('Access token', null, '/');\r\n            return accessToken;\r\n        }\r\n        else {\r\n            const accessUrl=`https://accounts.spotify.com/authorize?client_id=\r\n            CLIENT_ID${clientId}&response_type=token&scope=\r\n            playlist-modify-public&redirect_uri=\r\n            REDIRECT_URI=${redirectUri}`;\r\n            window.location=accessUrl;\r\n        }\r\n    },\r\n\r\n        search(term){\r\n            const accessToken = Spotify.getAccessToken();\r\n            return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse =>{\r\n\r\n                if (!jsonResponse.tracks)\r\n                {\r\n                    return [];\r\n                }\r\n                return jsonResponse.tracks.items.map(track=> ({\r\n                    id: track.id,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.accessUrl\r\n\r\n                }));\r\n            })\r\n        }\r\n\r\n\r\n    \r\n}\r\n\r\nexport default Spotify;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAC,kCAAkC;AACjD,MAAMC,WAAW,GAAC,uBAAuB;AAEzC,IAAIC,WAAW;AAGf,MAAMC,OAAO,GAAC;EACVC,cAAcA,CAAA,EAAE;IACZ,IAAIF,WAAW,EAAC;MACZ,OAAOA,WAAW;IACtB;IACA;IACA,MAAMG,gBAAgB,GACtBC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IAClD;IACA,MAAMC,cAAc,GAACJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IACrE,IAAIJ,gBAAgB,IAAIK,cAAc,EAAC;MACnCR,WAAW,GAACG,gBAAgB,CAAC,CAAC,CAAC;MAC/B,MAAMM,SAAS,GAACC,MAAM,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC;MACzC;AACZ;MACYJ,MAAM,CAACO,UAAU,CAAC,MAAIX,WAAW,GAAC,GAAG,EAAES,SAAS,GAAG,IAAI,CAAC;MACxDL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MACnD,OAAOb,WAAW;IACtB,CAAC,MACI;MACD,MAAMc,SAAS,GAAE;AAC7B,uBAAuBhB,QAAS;AAChC;AACA,2BAA2BC,WAAY,EAAC;MAC5BK,MAAM,CAACC,QAAQ,GAACS,SAAS;IAC7B;EACJ,CAAC;EAEGC,MAAMA,CAACC,IAAI,EAAC;IACR,MAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAc,CAAC,CAAC;IAC5C,OAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAC,EAAC;MAClEE,OAAO,EAAE;QACLC,aAAa,EAAG,UAASnB,WAAY;MACzC;IACJ,CAAC,CAAC,CAACoB,IAAI,CAACC,QAAQ,IAAI;MAChB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAACF,IAAI,CAACG,YAAY,IAAG;MAEnB,IAAI,CAACA,YAAY,CAACC,MAAM,EACxB;QACI,OAAO,EAAE;MACb;MACA,OAAOD,YAAY,CAACC,MAAM,CAACC,KAAK,CAACC,GAAG,CAACC,KAAK,KAAI;QAC1CC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,MAAM,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;QAC7BC,KAAK,EAAEL,KAAK,CAACK,KAAK,CAACD,IAAI;QACvBE,GAAG,EAAEN,KAAK,CAACb;MAEf,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;EACN;AAIR,CAAC;AAED,eAAeb,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}