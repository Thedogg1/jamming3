{"ast":null,"code":"const clientId = \"9c4652c46bd6487aa4a63b0cb56c3b12\";\nconst redirectUri = \"http://localhost:3000\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //Check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires.\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    try {\n      const accessToken = Spotify.getAccessToken();\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Autorization: `Bearer ${accessToken}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artist[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/\n                        ${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Autorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","error","console","log","savePlaylist","trackUris","length","Authorization","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/inetpub/wwwroot/Projects/Jamming/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId=\"9c4652c46bd6487aa4a63b0cb56c3b12\";\r\nconst redirectUri=\"http://localhost:3000\";\r\n\r\nlet accessToken;\r\n\r\n\r\nconst Spotify={\r\n    getAccessToken() {\r\n        if (accessToken){\r\n           return accessToken\r\n        }\r\n  \r\n        //Check for an access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n        if(accessTokenMatch && expiresInMatch) {\r\n           accessToken = accessTokenMatch[1];\r\n           const expiresIn = Number(expiresInMatch[1]);\r\n           //This clears the parameters, allowing us to grab a new access token when it expires.\r\n           window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n           window.history.pushState('Access Token', null, '/');\r\n           return accessToken;\r\n        }else{\r\n          const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n          window.location = accessUrl; \r\n        }\r\n     },\r\n\r\n    search(term) {\r\n        try {\r\n           \r\n           const accessToken = Spotify.getAccessToken();\r\n           \r\n           return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{headers: {Autorization: `Bearer ${accessToken}`}})\r\n           .then(response => {\r\n              return response.json();\r\n           }).then(jsonResponse => {\r\n              if(!jsonResponse.tracks){\r\n                 return [];\r\n              }\r\n              return jsonResponse.tracks.items.map(track => ({\r\n                 id: track.id,\r\n                 name: track.name,\r\n                 artist: track.artist[0].name,\r\n                 album: track.album.name,\r\n                 uri: track.uri\r\n              }))\r\n           })\r\n        } catch (error) {\r\n           console.log(error);\r\n        }\r\n     },\r\n  \r\n        savePlaylist(name, trackUris){\r\n            if (!name || !trackUris.length){\r\n                return;\r\n            }\r\n            const accessToken=Spotify.getAccessToken();\r\n            const headers= {Authorization: `Bearer ${accessToken}`};\r\n            let userId;\r\n            return fetch('https://api.spotify.com/v1/me',{headers: headers}\r\n            ).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                userId=jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({name: name})\r\n                    }).then(response=>response.json()\r\n                    ).then(jsonResponse =>{\r\n                        const playlistId=jsonResponse.id;\r\n                        return fetch(`https://api.spotify.com/v1/users/\r\n                        ${userId}/playlists/${playlistId}/tracks`,\r\n                        {headers: headers,\r\n                        method: 'POST',\r\n                      body: JSON.stringify({uris: trackUris})});\r\n                        \r\n                    })\r\n                \r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n}\r\n\r\nexport default Spotify;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}