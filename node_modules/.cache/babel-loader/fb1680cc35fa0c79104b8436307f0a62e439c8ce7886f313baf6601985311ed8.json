{"ast":null,"code":"const clientId = \"9c4652c46bd6487aa4a63b0cb56c3b12\";\nconst redirectUri = \"http://localhost:3000\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    //check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    //the above expression captures all teh characters in tthe access token\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      /*This clears the parameters, allowing us to grab\r\n      a new access token when it expires*/\n      window.setTimeout(() => accessToken = ' ', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=\n            ${clientId}&response_type=token&scope=\n            playlist-modify-public&redirect_uri=\n            REDIRECT_URI=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Autorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.accessUri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/\n                        ${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Autorization","then","response","json","jsonResponse","tracks","items","map","track","id","artist","artists","name","album","uri","accessUri","savePlaylist","trackUris","length","Authorization","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/inetpub/wwwroot/Projects/Jamming/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId=\"9c4652c46bd6487aa4a63b0cb56c3b12\";\r\nconst redirectUri=\"http://localhost:3000\";\r\n\r\nlet accessToken;\r\n\r\n\r\nconst Spotify={\r\n    getAccessToken(){\r\n        if (accessToken){\r\n            return accessToken;\r\n        }\r\n        //check for an access token match\r\n        const accessTokenMatch= \r\n        window.location.href.match(/access_token=([^&]*)/);\r\n        //the above expression captures all teh characters in tthe access token\r\n        const expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch){\r\n            accessToken=accessTokenMatch[1];\r\n            const expiresIn=Number(expiresInMatch[1]);\r\n            /*This clears the parameters, allowing us to grab\r\n            a new access token when it expires*/\r\n            window.setTimeout(()=>accessToken= ' ', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }\r\n        else {\r\n            const accessUrl=`https://accounts.spotify.com/authorize?client_id=\r\n            ${clientId}&response_type=token&scope=\r\n            playlist-modify-public&redirect_uri=\r\n            REDIRECT_URI=${redirectUri}`;\r\n            window.location=accessUrl;\r\n        }\r\n    },\r\n\r\n         search(term){\r\n            \r\n            \r\n            \r\n            \r\n            const accessToken = Spotify.getAccessToken();\r\n         return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n         {headers: {Autorization: `Bearer ${accessToken}`}})\r\n         .then(response => {\r\n            return response.json();\r\n         }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks){\r\n               return [];\r\n            }\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.accessUri\r\n                }));\r\n\r\n            });\r\n\r\n            \r\n           \r\n        },\r\n        savePlaylist(name, trackUris){\r\n            if (!name || !trackUris.length){\r\n                return;\r\n            }\r\n            const accessToken=Spotify.getAccessToken();\r\n            const headers= {Authorization: `Bearer ${accessToken}`};\r\n            let userId;\r\n            return fetch('https://api.spotify.com/v1/me',{headers: headers}\r\n            ).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                userId=jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({name: name})\r\n                    }).then(response=>response.json()\r\n                    ).then(jsonResponse =>{\r\n                        const playlistId=jsonResponse.id;\r\n                        return fetch(`https://api.spotify.com/v1/users/\r\n                        ${userId}/playlists/${playlistId}/tracks`,\r\n                        {headers: headers,\r\n                        method: 'POST',\r\n                      body: JSON.stringify({uris: trackUris})});\r\n                        \r\n                    })\r\n                \r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n}\r\n\r\nexport default Spotify;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}